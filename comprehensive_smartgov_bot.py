#!/usr/bin/env python3
"""
COMPREHENSIVE SmartGov Assistant Bot - COMPLETE Ex-Gratia Application
Collects ALL required information: Personal, Contact, Disaster, Financial, Banking Details
"""

import asyncio
import aiohttp
import json
import time
import logging
import nest_asyncio
import pandas as pd
import csv
import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# Fix for Windows event loop issues
nest_asyncio.apply()

# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartGovAssistantBot:
    def __init__(self):
        self.BOT_TOKEN = "7641958089:AAH2UW5H0EX9pGfE6wZZaURCpkyMHtJK8zw"
        self.MODEL_NAME = "qwen2.5:3b"
        self.LLM_ENDPOINT = "http://localhost:11434/api/generate"
        
        self.request_count = 0
        self.response_times = []
        self.session = None
        
        # User states for COMPREHENSIVE data collection
        self.user_states = {}
        self.user_languages = {}
        
        # COMPREHENSIVE Application Stages - Updated to match user requirements
        self.application_stages = [
            'applicant_name', 'father_name', 'village', 'contact_number', 
            'ward', 'gpu', 'khatiyan_no', 'plot_no', 'damage_type', 
            'damage_description', 'confirmation'
        ]
        
        self._initialize_comprehensive_data_files()
        
        # Complete multilingual templates
        self.responses = {
            'english': {
                'welcome': "ЁЯПЫя╕П **SmartGov Services** ЁЯПЫя╕П\n\nHow can I help you today? Select a service:",
                'disaster_mgmt': 'ЁЯЪи **Disaster Management Services**',
                'disaster_mgmt_desc': 'Available services:\nтАв Ex-gratia assistance application\nтАв Status checking\nтАв Information about norms\n\nSelect an option:',
                'exgratia_button': 'ЁЯТ░ Apply for Ex-Gratia Assistance',
                'status_check': 'ЁЯФН Application Status Check',
                'exgratia_norms': 'ЁЯУЛ Ex-Gratia Norms',
                'back_main': 'ЁЯФЩ Back to Main Menu',
                'understand_disaster': 'I understand you need disaster relief assistance. Available options:',
                'btn_disaster': 'ЁЯЪи Disaster Management',
                'btn_land': 'ЁЯПШя╕П Land Records',
                'btn_schemes': 'ЁЯУЛ Schemes & Registration',
                'btn_certificates': 'ЁЯУЬ Certificates',
                'btn_multi_scheme': 'ЁЯФЧ Multi-Scheme Apps',
                'btn_complaints': 'ЁЯУЮ Complaints & Emergency',
                'btn_tourism': 'ЁЯПФя╕П Tourism Assistance',
                'btn_other': 'тЪЩя╕П Other Utilities',
                # COMPREHENSIVE APPLICATION QUESTIONS
                'app_header': 'ЁЯТ░ **Ex-Gratia Assistance Application**\n\nI will collect ALL necessary information for your application.',
                'applicant_name_question': 'ЁЯСд What is your full name?\n(As per official documents)',
                'father_name_question': 'ЁЯСи What is your father\'s full name?',
                'village_question': 'ЁЯПШя╕П What is your village/town name?',
                'contact_number_question': 'ЁЯУ▒ What is your contact number? (10 digits)',
                'ward_question': 'ЁЯПа What is your Ward number?',
                'gpu_question': 'ЁЯПЫя╕П What is your GPU (Gram Panchayat Unit) number?',
                'khatiyan_no_question': 'ЁЯУД What is your Khatiyan number?\n(Land record number)',
                'plot_no_question': 'ЁЯЧ║я╕П What is your Plot number?',
                'damage_type_question': 'ЁЯМкя╕П What type of damage occurred?\n1я╕ПтГг Flood\n2я╕ПтГг Landslide\n3я╕ПтГг Earthquake\n4я╕ПтГг Fire\n5я╕ПтГг Storm/Cyclone\n6я╕ПтГг Other',
                'damage_description_question': 'ЁЯУЭ Describe the damage in detail:\n(House damage, property loss, etc.)',
                'confirmation_question': 'тЬЕ Please review and confirm:\nType "CONFIRM" to submit or "EDIT" to modify',
                'phone_error': 'тЭМ Please provide a valid 10-digit phone number.',
                'age_error': 'тЭМ Please provide a valid age (18-100).',
                'pincode_error': 'тЭМ Please provide a valid 6-digit PIN code.',
                'aadhar_error': 'тЭМ Please provide a valid 12-digit Aadhar number.',
                'amount_error': 'тЭМ Please provide a valid amount in numbers.',
                'application_success': 'тЬЕ **Application submitted successfully!**'
            },
            'hindi': {
                'welcome': "ЁЯПЫя╕П **рд╕реНрдорд╛рд░реНрдЯрдЧрд╡ рд╕реЗрд╡рд╛рдПрдВ** ЁЯПЫя╕П\n\nрдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ? рдПрдХ рд╕реЗрд╡рд╛ рдЪреБрдиреЗрдВ:",
                'disaster_mgmt': 'ЁЯЪи **рдЖрдкрджрд╛ рдкреНрд░рдмрдВрдзрди рд╕реЗрд╡рд╛рдПрдВ**',
                'disaster_mgmt_desc': 'рдЙрдкрд▓рдмреНрдз рд╕реЗрд╡рд╛рдПрдВ:\nтАв рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдЖрд╡реЗрджрди\nтАв рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪ\nтАв рдирд┐рдпрдореЛрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА\n\nрдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:',
                'exgratia_button': 'ЁЯТ░ рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдЖрд╡реЗрджрди',
                'status_check': 'ЁЯФН рдЖрд╡реЗрджрди рд╕реНрдерд┐рддрд┐ рдЬрд╛рдВрдЪ',
                'exgratia_norms': 'ЁЯУЛ рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рдирд┐рдпрдо',
                'back_main': 'ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВ рдкрд░ рд╡рд╛рдкрд╕',
                'understand_disaster': 'рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдкрдХреЛ рдЖрдкрджрд╛ рд░рд╛рд╣рдд рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдПред рдЙрдкрд▓рдмреНрдз рд╡рд┐рдХрд▓реНрдк:',
                'btn_disaster': 'ЁЯЪи рдЖрдкрджрд╛ рдкреНрд░рдмрдВрдзрди',
                'btn_land': 'ЁЯПШя╕П рднреВрдорд┐ рд░рд┐рдХреЙрд░реНрдб',
                'btn_schemes': 'ЁЯУЛ рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рдкрдВрдЬреАрдХрд░рдг',
                'btn_certificates': 'ЁЯУЬ рдкреНрд░рдорд╛рдгрдкрддреНрд░',
                'btn_multi_scheme': 'ЁЯФЧ рдмрд╣реБ-рдпреЛрдЬрдирд╛ рдРрдкреНрд╕',
                'btn_complaints': 'ЁЯУЮ рд╢рд┐рдХрд╛рдпрддреЗрдВ рдФрд░ рдЖрдкрд╛рддрдХрд╛рд▓',
                'btn_tourism': 'ЁЯПФя╕П рдкрд░реНрдпрдЯрди рд╕рд╣рд╛рдпрддрд╛',
                'btn_other': 'тЪЩя╕П рдЕрдиреНрдп рдЙрдкрдпреЛрдЧрд┐рддрд╛рдПрдВ',
                'app_header': 'ЁЯТ░ **рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдЖрд╡реЗрджрди**\n\nрдореИрдВ рдЖрдкрдХреЗ рдЖрд╡реЗрджрди рдХреЗ рд▓рд┐рдП рд╕рднреА рдЖрд╡рд╢реНрдпрдХ рдЬрд╛рдирдХрд╛рд░реА рдПрдХрддреНрд░ рдХрд░реВрдВрдЧрд╛ред',
                'applicant_name_question': 'ЁЯСд рдЖрдкрдХрд╛ рдкреВрд░рд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?\n(рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рджрд╕реНрддрд╛рд╡реЗрдЬреЛрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░)',
                'father_name_question': 'ЁЯСи рдЖрдкрдХреЗ рдкрд┐рддрд╛ рдХрд╛ рдкреВрд░рд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?',
                'village_question': 'ЁЯПШя╕П рдЖрдкрдХрд╛ рдЧрд╛рдВрд╡/рд╢рд╣рд░ рдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?',
                'contact_number_question': 'ЁЯУ▒ рдЖрдкрдХрд╛ рд╕рдВрдкрд░реНрдХ рдирдВрдмрд░ рдХреНрдпрд╛ рд╣реИ? (10 рдЕрдВрдХ)',
                'ward_question': 'ЁЯПа рдЖрдкрдХрд╛ рд╡рд╛рд░реНрдб рдирдВрдмрд░ рдХреНрдпрд╛ рд╣реИ?',
                'gpu_question': 'ЁЯПЫя╕П рдЖрдкрдХрд╛ GPU (рдЧреНрд░рд╛рдо рдкрдВрдЪрд╛рдпрдд рдЗрдХрд╛рдИ) рдирдВрдмрд░ рдХреНрдпрд╛ рд╣реИ?',
                'khatiyan_no_question': 'ЁЯУД рдЖрдкрдХрд╛ рдЦрддрд┐рдпрд╛рди рдирдВрдмрд░ рдХреНрдпрд╛ рд╣реИ?\n(рднреВрдорд┐ рд░рд┐рдХреЙрд░реНрдб рдирдВрдмрд░)',
                'plot_no_question': 'ЁЯЧ║я╕П рдЖрдкрдХрд╛ рдкреНрд▓реЙрдЯ рдирдВрдмрд░ рдХреНрдпрд╛ рд╣реИ?',
                'damage_type_question': 'ЁЯМкя╕П рдХреМрди рд╕реА рдЖрдкрджрд╛ рд╣реБрдИ?\n1я╕ПтГг рдмрд╛рдврд╝\n2я╕ПтГг рднреВрд╕реНрдЦрд▓рди\n3я╕ПтГг рднреВрдХрдВрдк\n4я╕ПтГг рдЖрдЧ\n5я╕ПтГг рддреВрдлрд╛рди/рдЪрдХреНрд░рд╡рд╛рдд\n6я╕ПтГг рдЕрдиреНрдп',
                'damage_description_question': 'ЁЯУЭ рдЕрдкрдиреА рд╣рд╛рдирд┐ рдХрд╛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╡рд░рдг рджреЗрдВ:\n(рдШрд░ рдХреА рдХреНрд╖рддрд┐, рд╕рдВрдкрддреНрддрд┐ рдХреА рд╣рд╛рдирд┐, рдЖрджрд┐)',
                'confirmation_question': 'тЬЕ рдХреГрдкрдпрд╛ рд╕рдореАрдХреНрд╖рд╛ рдХрд░реЗрдВ рдФрд░ рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ:\nрд╕рдмрдорд┐рдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП "CONFIRM" рдпрд╛ рд╕рдВрд╢реЛрдзрди рдХреЗ рд▓рд┐рдП "EDIT" рдЯрд╛рдЗрдк рдХрд░реЗрдВ',
                'phone_error': 'тЭМ рдХреГрдкрдпрд╛ 10 рдЕрдВрдХреЛрдВ рдХрд╛ рд╕рд╣реА рдлреЛрди рдирдВрдмрд░ рджреЗрдВред',
                'age_error': 'тЭМ рдХреГрдкрдпрд╛ рд╕рд╣реА рдЙрдореНрд░ рджреЗрдВ (18-100)ред',
                'pincode_error': 'тЭМ рдХреГрдкрдпрд╛ 6 рдЕрдВрдХреЛрдВ рдХрд╛ рд╕рд╣реА рдкрд┐рди рдХреЛрдб рджреЗрдВред',
                'aadhar_error': 'тЭМ рдХреГрдкрдпрд╛ 12 рдЕрдВрдХреЛрдВ рдХрд╛ рд╕рд╣реА рдЖрдзрд╛рд░ рдирдВрдмрд░ рджреЗрдВред',
                'amount_error': 'тЭМ рдХреГрдкрдпрд╛ рд╕рдВрдЦреНрдпрд╛ рдореЗрдВ рд╕рд╣реА рд░рд╛рд╢рд┐ рджреЗрдВред',
                'application_success': 'тЬЕ **рдЖрд╡реЗрджрди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬрдорд╛ рд╣реЛ рдЧрдпрд╛!**'
            },
            'nepali': {
                'welcome': "ЁЯПЫя╕П **рд╕реНрдорд╛рд░реНрдЯрдЧрдн рд╕реЗрд╡рд╛рд╣рд░реВ** ЁЯПЫя╕П\n\nрдЖрдЬ рдо рддрдкрд╛рдИрдВрдХреЛ рдХрд╕рд░реА рдорджреНрджрдд рдЧрд░реНрди рд╕рдХреНрдЫреБ? рдПрдХ рд╕реЗрд╡рд╛ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН:",
                'disaster_mgmt': 'ЁЯЪи **рд╡рд┐рдкрджреН рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди рд╕реЗрд╡рд╛рд╣рд░реВ**',
                'disaster_mgmt_desc': 'рдЙрдкрд▓рдмреНрдз рд╕реЗрд╡рд╛рд╣рд░реВ:\nтАв рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдЖрд╡реЗрджрди\nтАв рд╕реНрдерд┐рддрд┐ рдЬрд╛рдБрдЪ\nтАв рдирд┐рдпрдорд╣рд░реВрдХреЛ рдЬрд╛рдирдХрд╛рд░реА\n\nрдПрдХ рд╡рд┐рдХрд▓реНрдк рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН:',
                'exgratia_button': 'ЁЯТ░ рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рд╕рд╣рд╛рдпрддрд╛рдХреЛ рд▓рд╛рдЧрд┐ рдЖрд╡реЗрджрди',
                'status_check': 'ЁЯФН рдЖрд╡реЗрджрди рд╕реНрдерд┐рддрд┐ рдЬрд╛рдБрдЪ',
                'exgratia_norms': 'ЁЯУЛ рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рдирд┐рдпрдорд╣рд░реВ',
                'back_main': 'ЁЯФЩ рдореБрдЦреНрдп рдореЗрдиреВрдорд╛ рдлрд░реНрдХрдиреБрд╣реЛрд╕реН',
                'understand_disaster': 'рдо рдмреБрдЭреНрдЫреБ рддрдкрд╛рдИрдВрд▓рд╛рдИ рд╡рд┐рдкрджреН рд░рд╛рд╣рдд рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдПрдХреЛ рдЫред рдЙрдкрд▓рдмреНрдз рд╡рд┐рдХрд▓реНрдкрд╣рд░реВ:',
                'btn_disaster': 'ЁЯЪи рд╡рд┐рдкрджреН рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди',
                'btn_land': 'ЁЯПШя╕П рдЬрдЧреНрдЧрд╛ рд░реЗрдХрд░реНрдб',
                'btn_schemes': 'ЁЯУЛ рдпреЛрдЬрдирд╛рд╣рд░реВ рд░ рджрд░реНрддрд╛',
                'btn_certificates': 'ЁЯУЬ рдкреНрд░рдорд╛рдгрдкрддреНрд░рд╣рд░реВ',
                'btn_multi_scheme': 'ЁЯФЧ рдмрд╣реБ-рдпреЛрдЬрдирд╛ рдПрдкреНрд╕',
                'btn_complaints': 'ЁЯУЮ рдЧреБрдирд╛рд╕реЛ рд░ рдЖрдкрддрдХрд╛рд▓',
                'btn_tourism': 'ЁЯПФя╕П рдкрд░реНрдпрдЯрди рд╕рд╣рд╛рдпрддрд╛',
                'btn_other': 'тЪЩя╕П рдЕрдиреНрдп рдЙрдкрдпреЛрдЧрд┐рддрд╛рд╣рд░реВ',
                'app_header': 'ЁЯТ░ **рдПрдХреНрд╕-рдЧреНрд░реЗрд╢рд┐рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдЖрд╡реЗрджрди**\n\nрдо рддрдкрд╛рдИрдВрдХреЛ рдЖрд╡реЗрджрдирдХрд╛ рд▓рд╛рдЧрд┐ рд╕рдмреИ рдЖрд╡рд╢реНрдпрдХ рдЬрд╛рдирдХрд╛рд░реА рд╕рдЩреНрдХрд▓рди рдЧрд░реНрдиреЗрдЫреБред',
                'applicant_name_question': 'ЁЯСд рддрдкрд╛рдИрдВрдХреЛ рдкреВрд░рд╛ рдирд╛рдо рдХреЗ рд╣реЛ?\n(рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рдХрд╛рдЧрдЬрд╛рддрдЕрдиреБрд╕рд╛рд░)',
                'father_name_question': 'ЁЯСи рддрдкрд╛рдИрдВрдХреЛ рдмреБрдмрд╛рдХреЛ рдкреВрд░рд╛ рдирд╛рдо рдХреЗ рд╣реЛ?',
                'village_question': 'ЁЯПШя╕П рддрдкрд╛рдИрдВрдХреЛ рдЧрд╛рдЙрдБ/рд╕рд╣рд░рдХреЛ рдирд╛рдо рдХреЗ рд╣реЛ?',
                'contact_number_question': 'ЁЯУ▒ рддрдкрд╛рдИрдВрдХреЛ рд╕рдореНрдкрд░реНрдХ рдирдореНрдмрд░ рдХреЗ рд╣реЛ? (10 рдЕрдВрдХ)',
                'ward_question': 'ЁЯПа рддрдкрд╛рдИрдВрдХреЛ рд╡рд╛рд░реНрдб рдирдореНрдмрд░ рдХреЗ рд╣реЛ?',
                'gpu_question': 'ЁЯПЫя╕П рддрдкрд╛рдИрдВрдХреЛ GPU (рдЧреНрд░рд╛рдо рдкрдВрдЪрд╛рдпрдд рдЗрдХрд╛рдИ) рдирдореНрдмрд░ рдХреЗ рд╣реЛ?',
                'khatiyan_no_question': 'ЁЯУД рддрдкрд╛рдИрдВрдХреЛ рдЦрддрд┐рдпрд╛рди рдирдореНрдмрд░ рдХреЗ рд╣реЛ? (рднреВрдорд┐ рд░реЗрдХрд░реНрдб рдирдореНрдмрд░)',
                'plot_no_question': 'ЁЯЧ║я╕П рддрдкрд╛рдИрдВрдХреЛ рдкреНрд▓реЙрдЯ рдирдореНрдмрд░ рдХреЗ рд╣реЛ?',
                'damage_type_question': 'ЁЯМкя╕П рдХреБрди рдкреНрд░рдХрд╛рд░рдХреЛ рд╡рд┐рдкрджреН рднрдпреЛ?\n1я╕ПтГг рдмрд╛рдвреА\n2я╕ПтГг рдкрд╣рд┐рд░реЛ\n3я╕ПтГг рднреВрдХрдореНрдк\n4я╕ПтГг рдЖрдЧреЛ\n5я╕ПтГг рдЖрдБрдзреА/рдЪрдХреНрд░рд╡рд╛рдд\n6я╕ПтГг рдЕрдиреНрдп',
                'damage_description_question': 'ЁЯУЭ рдЖрдлреНрдиреЛ рд╣рд╛рдирд┐рдХреЛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╡рд░рдг рджрд┐рдиреБрд╣реЛрд╕реН:\n(рдШрд░рдХреЛ рдХреНрд╖рддрд┐, рд╕рдореНрдкрддреНрддрд┐рдХреЛ рд╣рд╛рдирд┐, рдЖрджрд┐)',
                'confirmation_question': 'тЬЕ рдХреГрдкрдпрд╛ рд╕рдореАрдХреНрд╖рд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд░ рдкреБрд╖реНрдЯрд┐ рдЧрд░реНрдиреБрд╣реЛрд╕реН:\nрдкреЗрд╢ рдЧрд░реНрди "CONFIRM" рд╡рд╛ рд╕рдореНрдкрд╛рджрди рдЧрд░реНрди "EDIT" рдЯрд╛рдЗрдк рдЧрд░реНрдиреБрд╣реЛрд╕реН',
                'phone_error': 'тЭМ рдХреГрдкрдпрд╛ 10 рдЕрдВрдХрдХреЛ рд╕рд╣реА рдлреЛрди рдирдореНрдмрд░ рджрд┐рдиреБрд╣реЛрд╕реНред',
                'age_error': 'тЭМ рдХреГрдкрдпрд╛ рд╕рд╣реА рдЙрдореЗрд░ рджрд┐рдиреБрд╣реЛрд╕реН (18-100)ред',
                'pincode_error': 'тЭМ рдХреГрдкрдпрд╛ 6 рдЕрдВрдХрдХреЛ рд╕рд╣реА рдкрд┐рди рдХреЛрдб рджрд┐рдиреБрд╣реЛрд╕реНред',
                'aadhar_error': 'тЭМ рдХреГрдкрдпрд╛ 12 рдЕрдВрдХрдХреЛ рд╕рд╣реА рдЖрдзрд╛рд░ рдирдореНрдмрд░ рджрд┐рдиреБрд╣реЛрд╕реНред',
                'amount_error': 'тЭМ рдХреГрдкрдпрд╛ рд╕рдВрдЦреНрдпрд╛рдорд╛ рд╕рд╣реА рд░рдХрдо рджрд┐рдиреБрд╣реЛрд╕реНред',
                'application_success': 'тЬЕ **рдЖрд╡реЗрджрди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреЗрд╢ рдЧрд░рд┐рдпреЛ!**'
            }
        }
        
    def _initialize_comprehensive_data_files(self):
        """Initialize COMPREHENSIVE CSV files for detailed data collection"""
        if not os.path.exists('data'):
            os.makedirs('data')
            
        # COMPREHENSIVE Ex-Gratia Application CSV with ALL necessary fields
        exgratia_file = 'data/exgratia_applications.csv'
        if not os.path.exists(exgratia_file):
            with open(exgratia_file, 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow([
                    'ApplicantName', 'FatherName', 'Village', 'ContactNumber', 
                    'Ward', 'GPU', 'KhatiyanNo', 'PlotNo', 'DamageType', 
                    'DamageDescription', 'SubmissionDate', 'Language', 'Status'
                ])
                
        # Keep basic submission.csv for other interactions
        if not os.path.exists('data/submission.csv'):
            with open('data/submission.csv', 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow(['submission_id', 'name', 'phone', 'submission_date', 'status', 'details', 'language'])

    def enhanced_language_detection(self, message: str) -> str:
        """Enhanced rule-based language detection with improved accuracy"""
        message_lower = message.lower()
        
        # English patterns - more comprehensive
        english_patterns = [
            'can you', 'help me', 'i want', 'how to', 'what is', 'apply for', 'application', 'please', 'thank you', 
            'hello', 'yes', 'no', 'where is', 'check my', 'my house', 'house got', 'damaged', 'assistance',
            'tell me', 'about', 'compensation', 'status check', 'flood', 'landslide', 'earthquake', 'fire', 'storm'
        ]
        english_score = sum(1 for pattern in english_patterns if pattern in message_lower)
        
        # Hindi-specific patterns (carefully avoiding Nepali overlap)
        hindi_patterns = [
            # Devanagari Hindi
            'рдореИрдВ', 'рдЖрдк', 'рдореЗрд░рд╛', 'рдХрд░рдирд╛', 'рд╣реИ', 'рд╣реВрдВ', 'рд╕реЗ', 'рдХреЛ', 'рдХрд╛', 'рдХреА', 'рдХреЗ', 'рдореЗрдВ', 'рдкрд░', 'рдирд╣реАрдВ', 'рд╣рд╛рдВ', 'рдЬреА', 'рдмрддрд╛рдУ', 'рдЪрд╛рд╣рд┐рдП', 'рдЕрдкрдирд╛', 'рдЙрдирдХрд╛', 'рдпрд╣', 'рд╡рд╣', 'рдХреИрд╕реЗ', 'рдХреНрдпрд╛', 'рдХрд╣рд╛рдВ', 'рдХрдм', 'рдХрд┐рд╕рдХрд╛', 'рдХрд┐рд╕рдХреЛ',
            # Romanized Hindi (EXCLUSIVE to Hindi - removed overlapping words)
            'mujhe', 'mereko', 'karna', 'hain', 'hai', 'hun', 'ho', 'kaise', 'kya', 'kahan', 'kab', 'chahiye', 'batao', 'btao', 'btayae', 'dijiye', 'dijye', 'krna', 'krdo', 'kro', 'baare', 'main', 'mein', 'banda', 'karo', 'nahin', 'nahi', 'haan', 'han', 'ji', 'sahab', 'sir', 'madam', 'aap', 'app', 'tum', 'tumhara', 'hamara', 'humara', 'wala', 'wale', 'wali', 'kitna', 'kitni'
        ]
        
        # Nepali-specific patterns (EXCLUSIVE to Nepali - removed Hindi overlaps)
        nepali_patterns = [
            # Devanagari Nepali (unique markers)
            'рдЫ', 'рд╣реБрдиреНрдЫ', 'рдЧрд░реНрдЫ', 'рд╕рдХреНрдЫреБ', 'рдЧрд░реНрдиреБрд╣реЛрд╕реН', 'рдЫреИрди', 'рднрдиреНрдиреБрд╣реЛрд╕реН', 'рдЪрд╛рд╣рд┐рдиреНрдЫ', 'рдкрд░реНрдЫ', 'рд╕рдХреНрдЫ', 'рдЧрд░реНрди', 'рднрдиреНрди', 'рд╣реЗрд░реНрди', 'рд╕реБрдиреНрди', 'рд░реБрдкреИрдпрд╛рдБ', 'рдХрддрд┐', 'рдХрд╕рд░реА', 'рдХрд┐рди', 'рдХреБрди', 'рд░рд╛рдореНрд░реЛ', 'рдирд░рд╛рдореНрд░реЛ', 'рдареВрд▓реЛ', 'рд╕рд╛рдиреЛ', 'рдирдпрд╛рдБ', 'рдкреБрд░рд╛рдиреЛ',
            # Romanized Nepali (EXCLUSIVE - removed Hindi overlaps like mujhe, main, btayae)
            'cha', 'chha', 'chaina', 'chhaina', 'huncha', 'hunchha', 'garcha', 'garchha', 'lai', 'malai', 'sakchu', 'garna', 'parcha', 'parchha', 'chaincha', 'chaaincha', 'maddat', 'madaad', 'kaha', 'kati', 'kasari', 'kina', 'ke', 'kun', 'rupaiya', 'paani', 'khaana', 'ramro', 'naramro', 'thulo', 'sano', 'naya', 'purano', 'paincha', 'paaincha', 'bigaareko', 'bigareko', 'noksaan', 'noksan', 'badhi', 'baadhi', 'hernu', 'herna', 'bhanna', 'bhannu', 'garnuhos', 'gara', 'barema', 'ko barema', 'tapai', 'tapaii', 'mero', 'hamro', 'timro', 'unko', 'yo', 'tyo', 'ma', 'hami', 'timi'
        ]
        
        # Shared patterns that could be both (weighted lower)
        shared_patterns = ['tera', 'uska', 'ghar', 'paisa', 'rupee', 'rupaye', 'paise', 'sahayata', 'sahayta']
        
        # Count Devanagari characters
        devanagari_count = sum(1 for char in message if '\u0900' <= char <= '\u097F')
        
        # Calculate word match scores
        hindi_word_score = sum(1 for pattern in hindi_patterns if pattern in message_lower)
        shared_word_score = sum(1 for pattern in shared_patterns if pattern in message_lower)
        nepali_word_score = sum(1 for pattern in nepali_patterns if pattern in message_lower)
        
        # Calculate TOTAL scores (this is what should be compared)
        hindi_total_score = hindi_word_score + (shared_word_score * 0.5) + (devanagari_count * 1.5)
        nepali_total_score = nepali_word_score + (shared_word_score * 0.5) + (devanagari_count * 1.5)
        
        logger.info(f"ЁЯФН LANGUAGE SCORES: English={english_score}, Hindi={hindi_total_score:.1f} (specific={hindi_word_score}, shared={shared_word_score}, devanagari={devanagari_count}), Nepali={nepali_total_score:.1f} (specific={nepali_word_score})")
        
        # FIXED Detection logic - compare TOTAL scores, not just word counts
        max_score = max(english_score, hindi_total_score, nepali_total_score)
        
        if max_score == 0:
            # No patterns matched, default to English
            detected = 'english'
        elif hindi_total_score == max_score and hindi_total_score > 0:
            # Hindi has highest score
            detected = 'hindi'
        elif nepali_total_score == max_score and nepali_total_score > 0:
            # Nepali has highest score
            detected = 'nepali'
        elif english_score == max_score and english_score > 0:
            # English has highest score
            detected = 'english'
        else:
            # Fallback to highest non-zero score
            if hindi_total_score >= nepali_total_score and hindi_total_score >= english_score:
                detected = 'hindi'
            elif nepali_total_score >= english_score:
                detected = 'nepali'
            else:
                detected = 'english'
        
        logger.info(f"ЁЯМР ENHANCED DETECTION: '{message}' тЖТ {detected.upper()}")
        return detected

    def get_user_language(self, user_id):
        return self.user_languages.get(user_id, 'english')

    def set_user_language(self, user_id, language):
        self.user_languages[user_id] = language
        logger.info(f"ЁЯМР USER LANGUAGE SET: User {user_id} тЖТ {language.upper()}")

    def get_response_text(self, key, user_id):
        language = self.get_user_language(user_id)
        return self.responses.get(language, self.responses['english']).get(key, key)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show main service selection menu"""
        user_id = update.effective_user.id
        language = self.get_user_language(user_id)
        
        keyboard = [
            [InlineKeyboardButton(self.get_response_text('btn_disaster', user_id), callback_data="disaster_management")],
            [InlineKeyboardButton(self.get_response_text('btn_land', user_id), callback_data="land_records")],
            [InlineKeyboardButton(self.get_response_text('btn_schemes', user_id), callback_data="schemes_registration")],
            [InlineKeyboardButton(self.get_response_text('btn_certificates', user_id), callback_data="certificates")],
            [InlineKeyboardButton(self.get_response_text('btn_multi_scheme', user_id), callback_data="multi_scheme_apps")],
            [InlineKeyboardButton(self.get_response_text('btn_complaints', user_id), callback_data="complaints_emergency")],
            [InlineKeyboardButton(self.get_response_text('btn_tourism', user_id), callback_data="tourism_assistance")],
            [InlineKeyboardButton(self.get_response_text('btn_other', user_id), callback_data="other_utilities")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = self.get_response_text('welcome', user_id)
        
        logger.info(f"ЁЯПа START COMMAND: User {user_id} тЖТ Language: {language.upper()} тЖТ FULL MENU IN {language.upper()}")
        
        if update.callback_query:
            await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle all button interactions"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        logger.info(f"ЁЯФШ BUTTON PRESSED: User {user_id} тЖТ {query.data}")
        
        if query.data == "disaster_management":
            await self.show_disaster_management(update, context)
        elif query.data == "back_to_main":
            await self.start_command(update, context)
        elif query.data == "exgratia_apply":
            await self.start_comprehensive_exgratia_application(update, context)
        elif query.data == "confirm_application":
            await self.complete_comprehensive_application(update, context)
        elif query.data == "reject_application":
            user_id = update.effective_user.id
            language = self.get_user_language(user_id)
            if user_id in self.user_states:
                del self.user_states[user_id]
            
            if language == 'hindi':
                reject_msg = "тЭМ рдЖрд╡реЗрджрди рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ред рдирдпрд╛ рдЖрд╡реЗрджрди рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /start рдЯрд╛рдЗрдк рдХрд░реЗрдВред"
            elif language == 'nepali':
                reject_msg = "тЭМ рдЖрд╡реЗрджрди рд░рджреНрдж рдЧрд░рд┐рдпреЛред рдирдпрд╛рдБ рдЖрд╡реЗрджрди рд╕реБрд░реБ рдЧрд░реНрди /start рдЯрд╛рдЗрдк рдЧрд░реНрдиреБрд╣реЛрд╕реНред"
            else:
                reject_msg = "тЭМ Application cancelled. Type /start to begin a new application."
            
            await update.callback_query.edit_message_text(reject_msg)
            logger.info(f"тЭМ APPLICATION REJECTED: User {user_id} тЖТ Cancelled by user")

    async def show_disaster_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show disaster management services"""
        user_id = update.effective_user.id
        language = self.get_user_language(user_id)
        
        keyboard = [
            [InlineKeyboardButton(self.get_response_text('exgratia_button', user_id), callback_data="exgratia_apply")],
            [InlineKeyboardButton(self.get_response_text('status_check', user_id), callback_data="status_check")],
            [InlineKeyboardButton(self.get_response_text('exgratia_norms', user_id), callback_data="exgratia_norms")],
            [InlineKeyboardButton(self.get_response_text('back_main', user_id), callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        header = self.get_response_text('disaster_mgmt', user_id)
        description = self.get_response_text('disaster_mgmt_desc', user_id)
        message = f"{header}\n\n{description}"
        
        logger.info(f"ЁЯЪи DISASTER MGMT: User {user_id} тЖТ Language: {language.upper()} тЖТ FULLY CONSISTENT INTERFACE")
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    async def start_comprehensive_exgratia_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start COMPREHENSIVE ex-gratia application process"""
        user_id = update.effective_user.id
        language = self.get_user_language(user_id)
        
        self.user_states[user_id] = {
            'stage': 'applicant_name', 
            'data': {}, 
            'language': language,
            'total_stages': len(self.application_stages),
            'current_stage_index': 0
        }
        
        header = self.get_response_text('app_header', user_id)
        question = self.get_response_text('applicant_name_question', user_id)
        progress = f"ЁЯУЛ Step 1/{len(self.application_stages)}"
        
        message = f"""{header}

{progress}

{question}"""
        
        logger.info(f"ЁЯУЭ COMPREHENSIVE EXGRATIA APPLICATION STARTED: User {user_id} тЖТ Language: {language.upper()} тЖТ {len(self.application_stages)} stages")
        await update.callback_query.edit_message_text(message, parse_mode='Markdown')

    def validate_input(self, stage: str, input_text: str) -> tuple[bool, str]:
        """Validate user input based on current stage"""
        input_text = input_text.strip()
        
        if stage == 'applicant_name':
            return (len(input_text) >= 2), input_text if len(input_text) >= 2 else 'Please provide valid full name'
                
        elif stage == 'father_name':
            return (len(input_text) >= 2), input_text if len(input_text) >= 2 else 'Please provide valid father\'s name'
                
        elif stage == 'village':
            return (len(input_text) >= 2), input_text if len(input_text) >= 2 else 'Please provide valid village name'
                
        elif stage == 'contact_number':
            clean_phone = input_text.replace(' ', '').replace('-', '').replace('+91', '')
            return (len(clean_phone) == 10 and clean_phone.isdigit()), clean_phone if len(clean_phone) == 10 and clean_phone.isdigit() else 'Please provide valid 10-digit contact number'
                
        elif stage == 'ward':
            return (len(input_text) >= 1), input_text if len(input_text) >= 1 else 'Please provide valid ward number'
                
        elif stage == 'gpu':
            return (len(input_text) >= 1), input_text if len(input_text) >= 1 else 'Please provide valid GPU number'
                
        elif stage == 'khatiyan_no':
            return (len(input_text) >= 1), input_text if len(input_text) >= 1 else 'Please provide valid Khatiyan number'
                
        elif stage == 'plot_no':
            return (len(input_text) >= 1), input_text if len(input_text) >= 1 else 'Please provide valid Plot number'
                
        elif stage == 'damage_type':
            if input_text in ['1', '2', '3', '4', '5', '6']:
                damage_map = {'1': 'Flood', '2': 'Landslide', '3': 'Earthquake', '4': 'Fire', '5': 'Storm/Cyclone', '6': 'Other'}
                return True, damage_map[input_text]
            return False, 'Please select 1-6 for damage type'
                
        elif stage == 'damage_description':
            return (len(input_text) >= 10), input_text if len(input_text) >= 10 else 'Please provide a detailed description of the damage (minimum 10 characters)'
                
        else:
            return (len(input_text) >= 2), input_text if len(input_text) >= 2 else 'Please provide valid information'

    async def handle_comprehensive_application_flow(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
        """Handle comprehensive application flow"""
        user_id = update.effective_user.id
        state = self.user_states[user_id]
        stage = state['stage']
        language = state['language']
        
        logger.info(f"ЁЯУЛ COMPREHENSIVE FLOW: User {user_id} тЖТ Stage: {stage.upper()}, Language: {language.upper()}, Input: '{message}'")
        
        # If we're at confirmation stage, we shouldn't handle text input (only button clicks)
        if stage == 'confirmation':
            if language == 'hindi':
                wait_msg = "рдХреГрдкрдпрд╛ рдКрдкрд░ рджрд┐рдП рдЧрдП рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"
            elif language == 'nepali':
                wait_msg = "рдХреГрдкрдпрд╛ рдорд╛рдерд┐ рджрд┐рдЗрдПрдХреЛ рдмрдЯрди рдкреНрд░рдпреЛрдЧ рдЧрд░реНрдиреБрд╣реЛрд╕реНред"
            else:
                wait_msg = "Please use the buttons above to confirm or reject."
            
            await update.message.reply_text(wait_msg)
            return
        
        is_valid, result = self.validate_input(stage, message)
        
        if not is_valid:
            if result in ['age_error', 'phone_error', 'pincode_error', 'aadhar_error', 'amount_error']:
                error_msg = self.get_response_text(result, user_id)
            else:
                error_msg = result
            
            question_key = f"{stage}_question"
            question = self.get_response_text(question_key, user_id)
            current_step = state['current_stage_index'] + 1
            progress = f"ЁЯУЛ Step {current_step}/{state['total_stages']}"
            
            await update.message.reply_text(f"{error_msg}\n\n{progress}\n\n{question}")
            logger.warning(f"тЭМ VALIDATION FAILED: User {user_id} тЖТ Stage: {stage.upper()}, Input: '{message}'")
            return
        
        state['data'][stage] = result
        logger.info(f"тЬЕ DATA COLLECTED: User {user_id} тЖТ {stage.upper()}: '{result}' (continuing in {language.upper()})")
        
        current_index = state['current_stage_index']
        if current_index < len(self.application_stages) - 1:
            next_index = current_index + 1
            next_stage = self.application_stages[next_index]
            
            state['stage'] = next_stage
            state['current_stage_index'] = next_index
            
            progress = f"ЁЯУЛ Step {next_index + 1}/{state['total_stages']}"
            
            if next_stage == 'confirmation':
                await self.show_application_confirmation(update, context)
            else:
                question_key = f"{next_stage}_question"
                question = self.get_response_text(question_key, user_id)
                await update.message.reply_text(f"{progress}\n\n{question}")
        else:
            await self.complete_comprehensive_application(update, context)

    async def show_application_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show collected data for confirmation with inline buttons"""
        user_id = update.effective_user.id
        data = self.user_states[user_id]['data']
        language = self.user_states[user_id]['language']
        
        confirmation = f"""ЁЯУЛ **Application Review**

**Personal Details:**
ЁЯСд Name: {data.get('applicant_name', '')}
ЁЯСи Father's Name: {data.get('father_name', '')}
ЁЯПШя╕П Village: {data.get('village', '')}
ЁЯУ▒ Contact Number: {data.get('contact_number', '')}

**Location Details:**
ЁЯПа Ward: {data.get('ward', '')}
ЁЯПЫя╕П GPU: {data.get('gpu', '')}
ЁЯУД Khatiyan No: {data.get('khatiyan_no', '')}
ЁЯЧ║я╕П Plot No: {data.get('plot_no', '')}

**Damage Details:**
ЁЯМкя╕П Damage Type: {data.get('damage_type', '')}
ЁЯУЭ Damage Description: {data.get('damage_description', '')}"""
        
        # Create inline keyboard buttons for confirmation
        if language == 'hindi':
            confirm_text = "тЬЕ рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ"
            reject_text = "тЭМ рд░рджреНрдж рдХрд░реЗрдВ"
            question_text = "рдХреГрдкрдпрд╛ рд╕рдореАрдХреНрд╖рд╛ рдХрд░реЗрдВ рдФрд░ рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ:"
        elif language == 'nepali':
            confirm_text = "тЬЕ рдкреБрд╖реНрдЯрд┐ рдЧрд░реНрдиреБрд╣реЛрд╕реН"
            reject_text = "тЭМ рд░рджреНрдж рдЧрд░реНрдиреБрд╣реЛрд╕реН"
            question_text = "рдХреГрдкрдпрд╛ рд╕рдореАрдХреНрд╖рд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН рд░ рдкреБрд╖реНрдЯрд┐ рдЧрд░реНрдиреБрд╣реЛрд╕реН:"
        else:
            confirm_text = "тЬЕ CONFIRM"
            reject_text = "тЭМ REJECT"
            question_text = "Please review and confirm your application:"
        
        keyboard = [
            [
                InlineKeyboardButton(confirm_text, callback_data="confirm_application"),
                InlineKeyboardButton(reject_text, callback_data="reject_application")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"{confirmation}\n\n{question_text}"
        
        logger.info(f"ЁЯУЛ CONFIRMATION SHOWN: User {user_id} тЖТ All data collected with buttons")
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    async def complete_comprehensive_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Complete comprehensive application"""
        user_id = update.effective_user.id
        data = self.user_states[user_id]['data']
        language = self.user_states[user_id]['language']
        
        import random
        import time
        app_id = f"24EXG{random.randint(10000, 99999)}"
        submission_date = time.strftime('%Y-%m-%d %H:%M:%S')
        
        # Add submission details to data
        data['submission_date'] = submission_date
        data['language'] = language.upper()
        data['application_id'] = app_id
        
        exgratia_file = 'data/exgratia_applications.csv'
        with open(exgratia_file, 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow([
                data.get('applicant_name', ''), data.get('father_name', ''), data.get('village', ''), 
                data.get('contact_number', ''), data.get('ward', ''), data.get('gpu', ''), 
                data.get('khatiyan_no', ''), data.get('plot_no', ''), data.get('damage_type', ''), 
                data.get('damage_description', ''), submission_date, language.upper(), 'Submitted'
            ])
        
        success_message = self.get_response_text('application_success', user_id)
        
        details = f"""ЁЯУЛ **Ex-Gratia Application Submitted Successfully!**

ЁЯЖФ **Application ID:** `{app_id}`
ЁЯУЕ **Submission Date:** {submission_date}
ЁЯМР **Language:** {language.upper()}
ЁЯУ▒ **Contact:** {data.get('contact_number', '')}

**ЁЯУД Application Details:**
ЁЯСд **Applicant:** {data.get('applicant_name', '')}
ЁЯСи **Father's Name:** {data.get('father_name', '')}
ЁЯПШя╕П **Village:** {data.get('village', '')}
ЁЯПа **Ward:** {data.get('ward', '')}
ЁЯПЫя╕П **GPU:** {data.get('gpu', '')}
ЁЯУД **Khatiyan No:** {data.get('khatiyan_no', '')}
ЁЯЧ║я╕П **Plot No:** {data.get('plot_no', '')}
ЁЯМкя╕П **Damage Type:** {data.get('damage_type', '')}
ЁЯУЭ **Damage Description:** {data.get('damage_description', '')}

ЁЯУЮ **Support Contact:**
Helpline: 1077
Email: smartgov@sikkim.gov.in

ЁЯФН **Keep your Application ID safe for status checking.**

тП░ **Expected Processing Time:** 7-15 working days
тЬЕ **Status:** Under Review"""
        
        logger.info(f"тЬЕ APPLICATION COMPLETED: User {user_id} тЖТ App ID: {app_id}, Language: {language.upper()}")
        
        # Handle both callback queries (from buttons) and regular messages
        if update.callback_query:
            await update.callback_query.edit_message_text(details, parse_mode='Markdown')
        else:
            await update.message.reply_text(details, parse_mode='Markdown')
        
        del self.user_states[user_id]

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle incoming messages with LLM processing"""
        message = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"ЁЯУй MESSAGE RECEIVED: User {user_id} тЖТ '{message}'")
        
        # Check for cancel commands first
        cancel_commands = ['cancel', 'stop', 'band karo', 'bandkaro', 'band kr', 'bandkar', 'cancel karo', 'cancel kar', 'quit', 'exit', 'рд░рджреНрдж рдХрд░реЛ', 'рдмрдВрдж рдХрд░реЛ', 'рд░реЛрдХреЛ', 'рдЫреЛрдбрд╝реЛ', 'рд╡рд╛рдкрд╕']
        if any(cmd in message.lower() for cmd in cancel_commands):
            if user_id in self.user_states:
                del self.user_states[user_id]
            language = self.get_user_language(user_id)
            welcome_msg = self.get_response_text('welcome', user_id)
            
            keyboard = [
                [InlineKeyboardButton(self.get_response_text('btn_disaster', user_id), callback_data="disaster_mgmt")],
                [InlineKeyboardButton(self.get_response_text('btn_land', user_id), callback_data="land_records")],
                [InlineKeyboardButton(self.get_response_text('btn_schemes', user_id), callback_data="schemes")],
                [InlineKeyboardButton(self.get_response_text('btn_certificates', user_id), callback_data="certificates")],
                [InlineKeyboardButton(self.get_response_text('btn_multi_scheme', user_id), callback_data="multi_scheme")],
                [InlineKeyboardButton(self.get_response_text('btn_complaints', user_id), callback_data="complaints")],
                [InlineKeyboardButton(self.get_response_text('btn_tourism', user_id), callback_data="tourism")],
                [InlineKeyboardButton(self.get_response_text('btn_other', user_id), callback_data="other")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            cancel_msg = "тЭМ Process cancelled. " if language == 'english' else "тЭМ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд░рджреНрдж рдХреА рдЧрдИред " if language == 'hindi' else "тЭМ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд░рджреНрдж рдЧрд░рд┐рдпреЛред "
            await update.message.reply_text(f"{cancel_msg}\n\n{welcome_msg}", reply_markup=reply_markup, parse_mode='Markdown')
            logger.info(f"тЭМ PROCESS CANCELLED: User {user_id} тЖТ Returned to main menu")
            return
        
        # If user is in application flow, handle it
        if user_id in self.user_states:
            await self.handle_comprehensive_application_flow(update, context, message)
            return
        
        # Detect language and set user preference
        detected_language = self.enhanced_language_detection(message)
        self.set_user_language(user_id, detected_language)
        logger.info(f"ЁЯМР USER LANGUAGE SET: User {user_id} тЖТ {detected_language.upper()}")
        
        # Show main menu
        await self.start_command(update, context)

    async def show_disaster_management_direct(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Direct access to disaster management"""
        user_id = update.effective_user.id
        
        keyboard = [
            [InlineKeyboardButton(self.get_response_text('exgratia_button', user_id), callback_data="exgratia_apply")],
            [InlineKeyboardButton(self.get_response_text('status_check', user_id), callback_data="status_check")],
            [InlineKeyboardButton(self.get_response_text('back_main', user_id), callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        header = self.get_response_text('disaster_mgmt', user_id)
        understanding = self.get_response_text('understand_disaster', user_id)
        message = f"{header}\n\n{understanding}"
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

def main():
    """Main function"""
    print("ЁЯЪА Starting COMPREHENSIVE SmartGov Assistant Bot...")
    print("ЁЯУЛ COMPREHENSIVE Ex-Gratia Application with ALL required fields!")
    print("ЁЯУК Comprehensive Data Collection:")
    stages = ['applicant_name', 'father_name', 'village', 'contact_number', 
              'ward', 'gpu', 'khatiyan_no', 'plot_no', 'damage_type', 
              'damage_description', 'confirmation']
    for i, stage in enumerate(stages, 1):
        print(f"   {i:2d}. {stage.replace('_', ' ').title()}")
    print("=" * 60)
    
    bot = SmartGovAssistantBot()
    application = Application.builder().token(bot.BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.message_handler))
    
    print("ЁЯдЦ COMPREHENSIVE SmartGov Assistant is running...")
    print("ЁЯУ▒ Bot Link: https://t.me/smartgov_assistant_bot")
    print("тЬЕ Ready to serve citizens with COMPREHENSIVE Ex-Gratia applications!")
    print("ЁЯУЛ COMPREHENSIVE APPLICATION: 16 stages of data collection!")
    print("=" * 60)
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 